{"mappings":"AA6DgB,IAAIA,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAcC,KAAKC,SAAW,GACpCC,YAAW,WACLH,GACFF,EAAQ,wBAEHC,EAAA,0B,GACN,I,IAIGK,MAAK,SAAAC,GACXC,QAAQC,IAAIF,E,IAEZ,SAAAG,GACEF,QAAQC,IAAIC,E","sources":["src/js/04-training.js"],"sourcesContent":["// const button = document.querySelector(\"button\");\n\n// const onClick = () => {\n//   setTimeout(() => {\n//     alert(\"I love async JS!\");\n//   }, 2000);\n// };\n\n// // Two seconds after clicking the button,\n// // alert specified inside the setTimeout callback will appear.\n// button.addEventListener(\"click\", onClick);\n// console.log(\"First log\");\n\n// setTimeout(() => {\n//   // Will run last, after 2000 milliseconds\n//   console.log(\"Second log\");\n// }, 5000);\n\n// // Will run second\n// console.log(\"Third log\");\n\n// const date = new Date();\n// console.log(date.getFullYear());\n\n\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = true;\n\n//       if (isSuccess) {\n//         resolve(\"success value\");\n//       } else {\n//         reject(\"error\");\n//       }\n//     }, 2000);\n//   });\n// };\n\n// fetchUserFromServer(\"Mango\")\n//   .then(user => console.log(user))\n//   .catch(error => console.error(error));\n\n//   const makePromise = (text, delay) => {\n//   return new Promise(resolve => {\n//     setTimeout(() => resolve(text), delay);\n//   });\n// };\n\n// const promiseA = makePromise(\"promiseA value\", 1000);\n// const promiseB = makePromise(\"promiseB value\", 3000);\n\n// Promise.all([promiseA, promiseB])\n//   .then(value => console.log(value)) //[\"promiseA value\", \"promiseB value\"]\n//   .catch(error => console.log(error));\n\n\nconst promise = new Promise((resolve, reject) => {\n  const canFullfill = Math.random() > 0.5;\n  setTimeout(() =>{\n    if (canFullfill) {\n      resolve('done sucsess успешно');\n    }\n    reject('отклонено reject promis');\n  }, 2000);\n  \n});\n\npromise.then(result => {\n  console.log(result);\n},\n  error => {\n    console.log(error);\n  }\n);\n\n// console.log(promise);\n\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFullfill = Math.random() > 0.5;\n//   setTimeout(){}\n//   if (canFullfill) {\n//     resolve('done sucsess успешно');\n//   }\n//   reject('отклонено reject promis');\n// });\n// console.log(promise);\n  // const objectPromise = { position, delay };\n\n  // return new Promise((resolve, reject) => {\n  //   if (shouldResolve) {\n  //     resolve(objectPromise);\n  //   }\n  //   reject(objectPromise);\n  // });\n"],"names":["Promise","resolve","reject","canFullfill","Math","random","setTimeout","then","result","console","log","error"],"version":3,"file":"04-training.4f8bb8ca.js.map"}